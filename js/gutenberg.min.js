(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _wp$components = wp.components,
    FormToggle = _wp$components.FormToggle,
    PanelRow = _wp$components.PanelRow,
    TextControl = _wp$components.TextControl;
var _wp$compose = wp.compose,
    withInstanceId = _wp$compose.withInstanceId,
    compose = _wp$compose.compose;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    Component = _wp$element.Component;
var PluginPostStatusInfo = wp.editPost.PluginPostStatusInfo;
var registerPlugin = wp.plugins.registerPlugin;

var LinksTo = function (_Component) {
	_inherits(LinksTo, _Component);

	function LinksTo() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, LinksTo);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LinksTo.__proto__ || Object.getPrototypeOf(LinksTo)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
			enabled: false,
			prevValue: ''
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(LinksTo, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    instanceId = _props.instanceId,
			    meta = _props.meta,
			    onUpdateLink = _props.onUpdateLink;

			var id = 'plt-toggle-' + instanceId;
			var textId = 'plt-links-to-' + instanceId;
			var url = meta._links_to || '';
			var initiallyEnabled = this.state.enabled === true || url && url.length > 0;

			var updateLink = function updateLink(link) {
				console.log('updateLink', { link: link, meta: meta });
				onUpdateLink(meta, link);
			};

			var toggleStatus = function toggleStatus() {
				initiallyEnabled = false; // No longer needed.
				console.log('toggleStatus', { state: _this2.state, meta: meta });
				_this2.setState(function (prevState) {
					return {
						enabled: !prevState.enabled
					};
				});
				onUpdateLink(meta, null);
			};

			var enabled = this.state.enabled || initiallyEnabled;

			return React.createElement(
				Fragment,
				null,
				React.createElement(
					PluginPostStatusInfo,
					null,
					React.createElement(
						'label',
						{ htmlFor: id },
						'Custom Link'
					),
					React.createElement(FormToggle, { id: id, checked: !!enabled, onChange: toggleStatus })
				),
				enabled && React.createElement(
					PluginPostStatusInfo,
					null,
					React.createElement(
						'label',
						{ htmlFor: textId },
						'Links to'
					),
					React.createElement(TextControl, {
						value: url,
						onChange: updateLink,
						placeholder: 'https://'
					})
				)
			);
		}
	}]);

	return LinksTo;
}(Component);

var PageLinksTo = compose([withSelect(function (select) {
	return {
		meta: select('core/editor').getEditedPostAttribute('meta')
	};
}), withDispatch(function (dispatch) {
	return {
		onUpdateLink: function onUpdateLink(meta, link) {
			dispatch('core/editor').editPost({ meta: _extends({}, meta, { _links_to: link }) });
		}
	};
}), withInstanceId])(LinksTo);

registerPlugin('page-links-to', {
	render: PageLinksTo
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9ndXRlbmJlcmcuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O3FCQ0E4QyxHQUFHLFU7SUFBekMsVSxrQkFBQSxVO0lBQVksUSxrQkFBQSxRO0lBQVUsVyxrQkFBQSxXO2tCQUNNLEdBQUcsTztJQUEvQixjLGVBQUEsYztJQUFnQixPLGVBQUEsTztlQUNhLEdBQUcsSTtJQUFoQyxVLFlBQUEsVTtJQUFZLFksWUFBQSxZO2tCQUNZLEdBQUcsTztJQUEzQixRLGVBQUEsUTtJQUFVLFMsZUFBQSxTO0lBQ1Ysb0IsR0FBeUIsR0FBRyxRLENBQTVCLG9CO0lBQ0EsYyxHQUFtQixHQUFHLE8sQ0FBdEIsYzs7SUFFRixPOzs7Ozs7Ozs7Ozs7OztzTEFDTCxLLEdBQVE7QUFDUCxZQUFTLEtBREY7QUFFUCxjQUFXO0FBRkosRzs7Ozs7MkJBS0M7QUFBQTs7QUFBQSxnQkFDbUMsS0FBSyxLQUR4QztBQUFBLE9BQ0EsVUFEQSxVQUNBLFVBREE7QUFBQSxPQUNZLElBRFosVUFDWSxJQURaO0FBQUEsT0FDa0IsWUFEbEIsVUFDa0IsWUFEbEI7O0FBRVIsT0FBTSxxQkFBbUIsVUFBekI7QUFDQSxPQUFNLDJCQUF5QixVQUEvQjtBQUNBLE9BQU0sTUFBTSxLQUFLLFNBQUwsSUFBa0IsRUFBOUI7QUFDQSxPQUFJLG1CQUFtQixLQUFLLEtBQUwsQ0FBVyxPQUFYLEtBQXVCLElBQXZCLElBQWdDLE9BQU8sSUFBSSxNQUFKLEdBQWEsQ0FBM0U7O0FBRUEsT0FBTSxhQUFhLFNBQWIsVUFBYSxPQUFRO0FBQzFCLFlBQVEsR0FBUixDQUFZLFlBQVosRUFBMEIsRUFBQyxVQUFELEVBQU8sVUFBUCxFQUExQjtBQUNBLGlCQUFhLElBQWIsRUFBbUIsSUFBbkI7QUFDQSxJQUhEOztBQUtBLE9BQU0sZUFBZSxTQUFmLFlBQWUsR0FBTTtBQUMxQix1QkFBbUIsS0FBbkIsQ0FEMEIsQ0FDQTtBQUMxQixZQUFRLEdBQVIsQ0FBWSxjQUFaLEVBQTRCLEVBQUMsT0FBTyxPQUFLLEtBQWIsRUFBb0IsVUFBcEIsRUFBNUI7QUFDQSxXQUFLLFFBQUwsQ0FBYztBQUFBLFlBQWM7QUFDM0IsZUFBUyxDQUFDLFVBQVU7QUFETyxNQUFkO0FBQUEsS0FBZDtBQUdBLGlCQUFhLElBQWIsRUFBbUIsSUFBbkI7QUFDQSxJQVBEOztBQVNBLE9BQU0sVUFBVSxLQUFLLEtBQUwsQ0FBVyxPQUFYLElBQXNCLGdCQUF0Qzs7QUFFQSxVQUNDO0FBQUMsWUFBRDtBQUFBO0FBQ0M7QUFBQyx5QkFBRDtBQUFBO0FBQ0M7QUFBQTtBQUFBLFFBQU8sU0FBUyxFQUFoQjtBQUFBO0FBQUEsTUFERDtBQUVDLHlCQUFDLFVBQUQsSUFBWSxJQUFJLEVBQWhCLEVBQW9CLFNBQVMsQ0FBQyxDQUFDLE9BQS9CLEVBQXdDLFVBQVUsWUFBbEQ7QUFGRCxLQUREO0FBS0UsZUFDQTtBQUFDLHlCQUFEO0FBQUE7QUFDQztBQUFBO0FBQUEsUUFBTyxTQUFTLE1BQWhCO0FBQUE7QUFBQSxNQUREO0FBRUMseUJBQUMsV0FBRDtBQUNDLGFBQU8sR0FEUjtBQUVDLGdCQUFVLFVBRlg7QUFHQyxtQkFBWTtBQUhiO0FBRkQ7QUFORixJQUREO0FBa0JBOzs7O0VBL0NvQixTOztBQWtEdEIsSUFBTSxjQUFjLFFBQVEsQ0FDM0IsV0FBVztBQUFBLFFBQVc7QUFDckIsUUFBTSxPQUFPLGFBQVAsRUFBc0Isc0JBQXRCLENBQTZDLE1BQTdDO0FBRGUsRUFBWDtBQUFBLENBQVgsQ0FEMkIsRUFJM0IsYUFBYTtBQUFBLFFBQWE7QUFDekIsZ0JBQWMsc0JBQUMsSUFBRCxFQUFPLElBQVAsRUFBZ0I7QUFDN0IsWUFBUyxhQUFULEVBQXdCLFFBQXhCLENBQWlDLEVBQUUsbUJBQVcsSUFBWCxJQUFpQixXQUFXLElBQTVCLEdBQUYsRUFBakM7QUFDQTtBQUh3QixFQUFiO0FBQUEsQ0FBYixDQUoyQixFQVMzQixjQVQyQixDQUFSLEVBVWpCLE9BVmlCLENBQXBCOztBQVlBLGVBQWUsZUFBZixFQUFnQztBQUMvQixTQUFRO0FBRHVCLENBQWhDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiY29uc3QgeyBGb3JtVG9nZ2xlLCBQYW5lbFJvdywgVGV4dENvbnRyb2wgfSA9IHdwLmNvbXBvbmVudHM7XG5jb25zdCB7IHdpdGhJbnN0YW5jZUlkLCBjb21wb3NlIH0gPSB3cC5jb21wb3NlO1xuY29uc3QgeyB3aXRoU2VsZWN0LCB3aXRoRGlzcGF0Y2ggfSA9IHdwLmRhdGE7XG5jb25zdCB7IEZyYWdtZW50LCBDb21wb25lbnQgfSA9IHdwLmVsZW1lbnQ7XG5jb25zdCB7IFBsdWdpblBvc3RTdGF0dXNJbmZvIH0gPSB3cC5lZGl0UG9zdDtcbmNvbnN0IHsgcmVnaXN0ZXJQbHVnaW4gfSA9IHdwLnBsdWdpbnM7XG5cbmNsYXNzIExpbmtzVG8gZXh0ZW5kcyBDb21wb25lbnQge1xuXHRzdGF0ZSA9IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRwcmV2VmFsdWU6ICcnLFxuXHR9O1xuXG5cdHJlbmRlcigpIHtcblx0XHRjb25zdCB7IGluc3RhbmNlSWQsIG1ldGEsIG9uVXBkYXRlTGluayB9ID0gdGhpcy5wcm9wcztcblx0XHRjb25zdCBpZCA9IGBwbHQtdG9nZ2xlLSR7aW5zdGFuY2VJZH1gO1xuXHRcdGNvbnN0IHRleHRJZCA9IGBwbHQtbGlua3MtdG8tJHtpbnN0YW5jZUlkfWA7XG5cdFx0Y29uc3QgdXJsID0gbWV0YS5fbGlua3NfdG8gfHwgJyc7XG5cdFx0bGV0IGluaXRpYWxseUVuYWJsZWQgPSB0aGlzLnN0YXRlLmVuYWJsZWQgPT09IHRydWUgfHwgKHVybCAmJiB1cmwubGVuZ3RoID4gMCk7XG5cblx0XHRjb25zdCB1cGRhdGVMaW5rID0gbGluayA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZygndXBkYXRlTGluaycsIHtsaW5rLCBtZXRhfSk7XG5cdFx0XHRvblVwZGF0ZUxpbmsobWV0YSwgbGluayk7XG5cdFx0fTtcblxuXHRcdGNvbnN0IHRvZ2dsZVN0YXR1cyA9ICgpID0+IHtcblx0XHRcdGluaXRpYWxseUVuYWJsZWQgPSBmYWxzZTsgLy8gTm8gbG9uZ2VyIG5lZWRlZC5cblx0XHRcdGNvbnNvbGUubG9nKCd0b2dnbGVTdGF0dXMnLCB7c3RhdGU6IHRoaXMuc3RhdGUsIG1ldGF9KTtcblx0XHRcdHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XG5cdFx0XHRcdGVuYWJsZWQ6ICFwcmV2U3RhdGUuZW5hYmxlZCxcblx0XHRcdH0pKTtcblx0XHRcdG9uVXBkYXRlTGluayhtZXRhLCBudWxsKTtcblx0XHR9O1xuXG5cdFx0Y29uc3QgZW5hYmxlZCA9IHRoaXMuc3RhdGUuZW5hYmxlZCB8fCBpbml0aWFsbHlFbmFibGVkO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxGcmFnbWVudD5cblx0XHRcdFx0PFBsdWdpblBvc3RTdGF0dXNJbmZvPlxuXHRcdFx0XHRcdDxsYWJlbCBodG1sRm9yPXtpZH0+Q3VzdG9tIExpbms8L2xhYmVsPlxuXHRcdFx0XHRcdDxGb3JtVG9nZ2xlIGlkPXtpZH0gY2hlY2tlZD17ISFlbmFibGVkfSBvbkNoYW5nZT17dG9nZ2xlU3RhdHVzfSAvPlxuXHRcdFx0XHQ8L1BsdWdpblBvc3RTdGF0dXNJbmZvPlxuXHRcdFx0XHR7ZW5hYmxlZCAmJiAoXG5cdFx0XHRcdFx0PFBsdWdpblBvc3RTdGF0dXNJbmZvPlxuXHRcdFx0XHRcdFx0PGxhYmVsIGh0bWxGb3I9e3RleHRJZH0+TGlua3MgdG88L2xhYmVsPlxuXHRcdFx0XHRcdFx0PFRleHRDb250cm9sXG5cdFx0XHRcdFx0XHRcdHZhbHVlPXt1cmx9XG5cdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt1cGRhdGVMaW5rfVxuXHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cImh0dHBzOi8vXCJcblx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PC9QbHVnaW5Qb3N0U3RhdHVzSW5mbz5cblx0XHRcdFx0KX1cblx0XHRcdDwvRnJhZ21lbnQ+XG5cdFx0KTtcblx0fVxufVxuXG5jb25zdCBQYWdlTGlua3NUbyA9IGNvbXBvc2UoW1xuXHR3aXRoU2VsZWN0KHNlbGVjdCA9PiAoe1xuXHRcdG1ldGE6IHNlbGVjdCgnY29yZS9lZGl0b3InKS5nZXRFZGl0ZWRQb3N0QXR0cmlidXRlKCdtZXRhJyksXG5cdH0pKSxcblx0d2l0aERpc3BhdGNoKGRpc3BhdGNoID0+ICh7XG5cdFx0b25VcGRhdGVMaW5rOiAobWV0YSwgbGluaykgPT4ge1xuXHRcdFx0ZGlzcGF0Y2goJ2NvcmUvZWRpdG9yJykuZWRpdFBvc3QoeyBtZXRhOiB7IC4uLm1ldGEsIF9saW5rc190bzogbGluayB9IH0pO1xuXHRcdH0sXG5cdH0pKSxcblx0d2l0aEluc3RhbmNlSWQsXG5dKShMaW5rc1RvKTtcblxucmVnaXN0ZXJQbHVnaW4oJ3BhZ2UtbGlua3MtdG8nLCB7XG5cdHJlbmRlcjogUGFnZUxpbmtzVG8sXG59KTtcbiJdfQ==
